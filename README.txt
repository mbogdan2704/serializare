	Structura tema:	Am creeat 3 clase: NodA, NodB, NodC, in care am 3 "pointeri" la lista, vector si set. Aceste 3 clase extind o clasa "Nod", in care am definit metodele folosite in cele 3 clase(Ex: get(i), remove(i) etc).In cele 3 clase am suprascris aceste metode.In momentul in care apare primul "settings", setez variabila "indice" care simbolizeaza prin ce structura am stocat nodurile adiacente(list,vector sau set).Toate nodurile care sunt inserate le-am stocat in vectorul nod_list, iar numele aferent nodului in name_list.
	Main:Prima data, am declarat datele pe care le voi folosi si am deschis fisierele care trebuie folosite.Apoi, am verificat
daca comanda este "settings" iar variabila booleana cast este setata.In caz afirmativ, trebuie facut cast-ul.Am memorat vechiul indice si am vazut daca trebuie facut cast-ul.In cazul in care cast-ul nu poate fi facut, am afisat in fisierul .log
mesajul corespunzator, la fel si in cazul in care cast-ul poate fi facut.Dupa, in functie de vechiul indice si noul indice
am apelat functia de cast. Daca opertia este "Settings" iar variabila cast == false(asta inseamna ca este primul Settings) tot ce trebuie sa fac este sa setez indicii in cele 3 clase. Daca operatia este "Add", atunci creez o noua instanta la nodul
corespunzator in nod_list.Dupa setez numele si id-ul.Apoi, ma duc in nodurile adiacente si creez muchiile intre acest nod si vecinii.Pentru operatia de serializare, vad care este obiect-ul corespunzator string-ului "lookingFor" si apelez functia de serializare.Pentru operatia de deserializare este la fel.Pentru functia de stergere muchie, vad care sunt obiectele corespunzatoare numelor si apoi le caut in cele 3 structuri si apelez functia de stergere. Pentru operatia de stergere nod, merg in toate nodurile si vad care noduri sunt adiacente cu nodul respectiv si sterg legatura dintre ele.
	Serializare(Parcurgerea este facuta in latime): In clasa de serializare(in metoda ser), dupa afisarea stringurilor pentru a creea xml-ul(Ex: <object, <Reference, <name> etc) am mers in toti vecinii nodului de la care se pleaca si i-am afisat in modul in care este specificat in enunt.Dupa care, pentru acesti vecini am apelat functia parcurgereA.Aceasta, pentru fiecare nod in parte afiseaza nodurile adiacente acestuia, dupa care merge in nodurile respective. Mi-a fost mai usor pentru deserializare sa afisez toate nodurile adiacente, dupa care sa merg in fiecare in parte.Tot pentru deserializare, mi-a fost mai usor sa afisez si numele aferent nodului.
	Deserializare: Pentru inceput am sters graful care deja exista.Apoi, am citit prima linia si am creeat nodul care este specificat acolo.Dupa, am citit toate liniile, si folosind regex am scapat de taburi. Apoi, folosindu-ma de faptul ca am facut serializare in modul in care am specificat mai sus, sub fiecare tag "<set>,<list>,<vector>" aveam afisat nodurile adiacente cu nodul curent(pe care l-am salvat in variabila obiect.Functia getObject returneaza obiectul corespunzator stringului lookingFor.
	Clasele NodA,nodB,NodC : Am creeat setere si ghatere care sa imi creeze/returneaza variabilele dorite(indice, Number etc). In aceste clase am pointerii catre liste, vector si set. Tot aici am si functia de createMuchie.
	Clasa ClassList: Aceasta clasa are un pointer catre o clasa de tipul "Node".Aceasta clasa specifica un nod dintr-o lista.Clasa Node are metode de setNext,getNext etc.Clasa classList are metodele pentru get, remove etc.Clasa classSet este asemanatoare, doar ca am folosit un arbore binar pentru a stoca informatiile.Arborele este stocat dupa hashCode clasei.

***Important***
	Din enunt eu am inteles ca daca se incarca o versiune mai veche, "versiunea curenta" inseamna aceasta versiune. Adica daca din vector se incearca transformarea la lista, aceasta se va efectua si se va afisa eroare in fisierul "deserialize_cast.log".
	Pentru fiecare nod eu am afisat prima data nodurile adiacente, pentru a fi mai usoara operatia de deserializare.Prin urmare, fiecare tag <Object> l-am inchis imediat dupa, specificand nodul curent prin
tagul <Name>.De exemplu, daca vreau sa vad nodurile adiacente pentru nodul Marian, caut tagul <Name> Marian </Name> si apoi vad care sunt nodurile adiacente pana la urmatorul tag <Name>
